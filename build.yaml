resources:
  repositories:
  - repository: helmRepo
    type: github
    endpoint: John D Watson
    name: johnwatson484/helm-charts

parameters:
- name: name
  type: string
- name: containerRepository
  type: string
  default:
- name: helmChartPath
  type: string
  default:
- name: framework
  type: string
  default: node
- name: sonarcloud
  type: boolean
  default: true
- name: project
  type: string
  default:
- name: hasSecureHelmValuesFile
  type: boolean
  default: false
- name: namespace
  type: string
  default: default
- name: deploy
  type: boolean
  default: false

variables:
  - group: SonarCloud
  - group: Helm
  - name: repo
    value: ${{ parameters.name }}
  - name: testFileExists
    value: false
  - name: releaseExists
    value: false
  - name: version
    value:
  - name: targetFramework
    value:
  - name: sonarImageVersion
    value:
  - name: helmRepo
    value: helm-charts
  - name: helmRepositoryUrl
    value: git@github.com:johnwatson484/helm-charts.git
  - name: containerRepository
    value:
  - name: helmChartPath
    value:
  - name: helmRepository
    value: services.lynxmagnus.com:8080

jobs:
- job: Build

  pool:
    vmImage: ubuntu-latest

  workspace:
    clean: all

  steps: 
    - checkout: self
      displayName: Clone repository

    - task: PowerShell@2
      displayName: Set repository name
      inputs:
        targetType: 'inline'
        script: |
          $repo = '$(Build.Repository.Name)'.Split('/')[-1]
          Write-Host "##vso[task.setvariable variable=repo]$repo"

    - task: PowerShell@2
      displayName: Set variables
      inputs:
        targetType: 'inline'
        script: |
          if (!([string]::IsNullOrEmpty('${{ parameters.containerRepository }}')))
          {
              $containerRepository = '${{ parameters.containerRepository }}'
          }
          else
          {
              $containerRepository = 'johnwatson484/${{ parameters.name }}'
          }
          Write-Host "##vso[task.setvariable variable=containerRepository;]$containerRepository"
          if (!([string]::IsNullOrEmpty('${{ parameters.helmChartPath }}')))
          {
              $helmChartPath = '${{ parameters.helmChartPath }}'
          }
          else
          {
              $helmChartPath = 'helm/${{ parameters.name }}'
          }
          Write-Host "##vso[task.setvariable variable=helmChartPath;]$helmChartPath"

    - task: PowerShell@2
      displayName: Set version (Node.js)
      inputs:
        targetType: 'inline'
        script: |
          $packageVersion = (Get-Content '$(Agent.BuildDirectory)/s/$(repo)/package.json' | ConvertFrom-Json).version
          Write-Host "##vso[task.setvariable variable=version;]$packageVersion"
      condition: and(succeeded(), eq('${{ parameters.framework }}', 'node'))

    - task: PowerShell@2
      displayName: Set version (.NET)
      inputs:
        targetType: 'inline'
        script: |
          $csprojVersion = ([xml](Get-Content '$(Agent.BuildDirectory)/s/$(repo)/${{ parameters.project }}/${{ parameters.project }}.csproj')).Project.PropertyGroup.Version
          Write-Host "##vso[task.setvariable variable=version;]$csprojVersion"
      condition: and(succeeded(), eq('${{ parameters.framework }}', 'net'))

    - task: PowerShell@2
      displayName: Set version (File)
      inputs:
        targetType: 'inline'
        script: |
          $fileVersion = (Get-Content '$(Agent.BuildDirectory)/s/$(repo)/VERSION')
          Write-Host "##vso[task.setvariable variable=version;]$fileVersion"
      condition: and(succeeded(), ne('${{ parameters.framework }}', 'net'), ne('${{ parameters.framework }}', 'node'))

    - task: PowerShell@2
      displayName: Create version file
      inputs:
        targetType: 'inline'
        script: |
          Set-Content $(Build.ArtifactStagingDirectory)\version.txt '$(version)'

    - task: PowerShell@2
      displayName: Set target framework (.NET)
      inputs:
        targetType: 'inline'
        script: |
          $csprojVersion = ([xml](Get-Content '$(Agent.BuildDirectory)/s/$(repo)/${{ parameters.project }}/${{ parameters.project }}.csproj')).Project.PropertyGroup.TargetFramework
          Write-Host "##vso[task.setvariable variable=targetFramework;]$csprojVersion"
      condition: and(succeeded(), eq('${{ parameters.framework }}', 'net'))

    - task: PowerShell@2
      displayName: Check for tests
      inputs:
        targetType: 'inline'
        script: |
          $fileExists = Test-Path -Path "$(Agent.BuildDirectory)/s/$(repo)/docker-compose.test.yaml"
          Write-Host "##vso[task.setvariable variable=testFileExists;]$fileExists"

    - script: |
        docker-compose -f $(Agent.BuildDirectory)/s/$(repo)/docker-compose.yaml -f $(Agent.BuildDirectory)/s/$(repo)/docker-compose.test.yaml -p $(repo)-test-$(Build.BuildId) build
      displayName: Build test image
      condition: and(succeeded(), eq(variables.testFileExists, true))

    - script: |
        docker-compose -f $(Agent.BuildDirectory)/s/$(repo)/docker-compose.yaml -f $(Agent.BuildDirectory)/s/$(repo)/docker-compose.test.yaml -p $(repo)-test-$(Build.BuildId) run --rm $(repo)
      displayName: Run tests
      condition: and(succeeded(), eq(variables.testFileExists, true))

    - task: Docker@2
      displayName: Build image
      inputs:
        containerRegistry: 'DockerHub'
        repository: '$(containerRepository)'
        command: 'build'
        Dockerfile: '$(Agent.BuildDirectory)/s/$(repo)/Dockerfile'
        tags: |
          $(version)
          latest
        arguments: '--target production'
        addPipelineData: false

    - task: Docker@2
      displayName: Push image
      inputs:
        containerRegistry: 'DockerHub'
        repository: '$(containerRepository)'
        command: 'push'
        tags: |
          $(version)
          latest
        addPipelineData: false

    - script: |
        sed -i -e 's/image: .*/image: johnwatson484\/${{ parameters.name }}:$(version)/' $(Agent.BuildDirectory)/s/$(repo)/$(helmChartPath)/values.yaml
      displayName: Update Helm values
    
    - task: HelmInstaller@1
      displayName: Install Helm
      inputs:
        helmVersionToInstall: 'latest'

    - checkout: helmRepo
      displayName: Clone Helm repository

    - script: |
        helm package $(Agent.BuildDirectory)/s/$(repo)/$(helmChartPath) --version $(version) --destination $(Agent.BuildDirectory)/s/$(helmRepo) --dependency-update
      displayName: Package Helm

    - script: |
        result=$(curl -v -s -o /dev/null -w "%{http_code}" --data-binary "@$(Agent.BuildDirectory)/s/$(helmRepo)/$(repo)-$(version).tgz" http://$(username):$(password)@$(helmRepository)/api/charts)
        if [ "$result" == "201" ]
        then
          echo "OK"
        else
          echo $result
          exit 1
        fi
      displayName: Publish Helm chart to Chart Museum

    - task: DownloadSecureFile@1
      name: sshKey
      displayName: Download SSH key
      inputs:
        secureFile: 'GitHub-Helm-Deploy-Key'

    - script: |
        mkdir ~/.ssh && mv $(sshKey.secureFilePath) ~/.ssh/id_rsa
        chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
      displayName: Install SSH key
    
    - script: |
        cd $(Agent.BuildDirectory)/s/$(helmRepo)
        git config --global user.email "azuredevops@microsoft.com"
        git config --global user.name "Azure DevOps"
        git remote set-url --push origin $(helmRepositoryUrl)
        git pull origin master
        helm repo index . --merge ./index.yaml
        git add .
        git commit -m "${{ parameters.name }} updated by Azure DevOps"
        git push origin HEAD:master
      displayName: Update Helm GitHub repository

    - task: PowerShell@2
      displayName: Set Sonar image version (.NET)
      inputs:
        targetType: 'inline'
        script: |
          switch ("$(targetFramework)")
          {
            "netcoreapp3.1" { $tag = "1.2.3-dotnet3.1"; Break }
            "net6.0" { $tag = "1.3.1-dotnet6.0"; Break }
          }
          Write-Host "##vso[task.setvariable variable=sonarImageVersion;]$tag"
      condition: and(succeeded(), eq('${{ parameters.framework }}', 'net'))

    - script: |
        cd $(Agent.BuildDirectory)/s/$(repo)
        docker run \
          -v $(pwd)/:/home/dotnet/project \
          -e SONAR_PROJECT_KEY=johnwatson484_$(repo) \
          -e SONAR_TOKEN=$(token) \
          -e SONAR_ORGANIZATION_KEY=johnwatson484 \
          --rm \
          defradigital/ffc-dotnet-core-sonar:$(sonarImageVersion)
      displayName: SonarCloud analysis (.NET)
      condition: and(succeeded(), eq('${{ parameters.framework }}', 'net'), eq('${{ parameters.sonarcloud }}', true))

    - task: PowerShell@2
      displayName: Check GitHub release
      inputs:
        targetType: 'inline'
        script: |
          $releaseExists = (Invoke-RestMethod -SkipHttpErrorCheck -Uri 'https://api.github.com/repos/johnwatson484/$(repo)/releases/tags/$(version)').tag_name -eq '$(version)'
          Write-Host "##vso[task.setvariable variable=releaseExists;]$releaseExists"

    - task: GitHubRelease@1
      displayName: GitHub release
      inputs:
        gitHubConnection: 'John D Watson PAT'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'userSpecifiedTag'
        tag: '$(version)'
        title: '$(version)'
        releaseNotesSource: 'inline'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
      continueOnError: true
      condition: and(succeeded(), eq(variables.releaseExists, false))

    - task: DownloadSecureFile@1
      displayName: Download Helm values file
      name: helmValuesFile
      inputs:
        secureFile: $(repo)-values.yaml
      condition: and(succeeded(), eq(${{ parameters.hasSecureHelmValuesFile }}, true))

    - task: CopyFilesOverSSH@0
      displayName: Copy values file
      inputs:
        sshEndpoint: 'Kubernetes Master'
        sourceFolder: $(Agent.TempDirectory)
        contents:  ${{ parameters.name }}-values.yaml
        targetFolder: /tmp
      condition: and(succeeded(), eq(${{ parameters.hasSecureHelmValuesFile }}, true), eq(${{ parameters.deploy }}, true))

    - task: SSH@0
      displayName: 'Deploy to Kubernetes'
      inputs:
        sshEndpoint: 'Kubernetes Master'
        runOptions: inline
        inline: |
          helm repo update
          helm upgrade --install --namespace ${{ parameters.namespace }} -f /tmp/$(repo)-values.yaml $(repo) --atomic lynxmagnus/$(repo) --version $(version) --create-namespace
      condition: and(succeeded(), eq(${{ parameters.hasSecureHelmValuesFile }}, true), eq(${{ parameters.deploy }}, true))

    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop
