parameters:
- name: repo
  type: string
  default:
- name: project
  type: string
  default:
- name: sonarcloud
  type: boolean
  default: true

variables:
  - group: SonarCloud
  - name: releaseExists
    value: false
  - name: version
    value:
  - name: targetFramework
    value:
  - name: sonarImageVersion
    value:

jobs:
- job:
  pool:
    vmImage: 'ubuntu-latest'

  steps:

    - task: PowerShell@2
      displayName: Set version
      inputs:
        targetType: 'inline'
        script: |
          $csprojVersion = ([xml](Get-Content '${{ parameters.project }}/${{ parameters.project }}.csproj')).Project.PropertyGroup.Version
          Write-Host "##vso[task.setvariable variable=version;]$csprojVersion"

    - task: PowerShell@2
      displayName: Set target framework
      inputs:
        targetType: 'inline'
        script: |
          $csprojVersion = ([xml](Get-Content '$(Agent.BuildDirectory)/s/${{ parameters.repo }}/${{ parameters.project }}/${{ parameters.project }}.csproj')).Project.PropertyGroup.TargetFramework
          Write-Host "##vso[task.setvariable variable=targetFramework;]$csprojVersion"

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        arguments: '--configuration Release'
        restoreSolution: '**/*.sln'

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        arguments: '--configuration Release'
        projects: '**/*.sln'

    - task: PowerShell@2
      displayName: Set Sonar image version
      inputs:
        targetType: 'inline'
        script: |
          switch ($(targetFramework))
          {
            "netcoreapp3.1"
            {
              $tag = "1.2.3-dotnet3.1"
              Write-Host "##vso[task.setvariable variable=sonarImageVersion;]$tag"; 
              Break 
            }
            "net6.0"
            {
              $tag = "1.3.0-dotnet6.0"
              Write-Host "##vso[task.setvariable variable=sonarImageVersion;]$tag"; 
              Break 
            }
          }

    - script: |
        cd $(Agent.BuildDirectory)/s/${{ parameters.repo }}
        docker run \
          -v $(pwd)/:/home/dotnet/project \
          -e SONAR_PROJECT_KEY=johnwatson484_${{ parameters.repo }} \
          -e SONAR_TOKEN=$(token) \
          -e SONAR_ORGANIZATION_KEY=johnwatson484 \
          defradigital/ffc-dotnet-core-sonar:$(sonarImageVersion)
      displayName: SonarCloud analysis (.NET)
      condition: and(succeeded(), eq('${{ parameters.sonarcloud }}', true))

    - script: |
        dotnet pack -c Release --no-build -o $(Build.ArtifactStagingDirectory)
      displayName: NuGet pack

    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        nuGetFeedType: external
        publishFeedCredentials: NuGet
        allowPackageConflicts: true
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'

    - task: PowerShell@2
      displayName: Check GitHub release
      inputs:
        targetType: 'inline'
        script: |
          $releaseExists = (Invoke-RestMethod -SkipHttpErrorCheck -Uri 'https://api.github.com/repos/johnwatson484/${{ parameters.repo }}/releases/tags/$(version)').tag_name -eq '$(version)'
          Write-Host "##vso[task.setvariable variable=releaseExists;]$releaseExists"

    - task: GitHubRelease@1
      displayName: GitHub release
      inputs:
        gitHubConnection: 'John D Watson PAT'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'userSpecifiedTag'
        tag: '$(version)'
        title: '$(version)'
        releaseNotesSource: 'inline'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
      continueOnError: true
      condition: and(succeeded(), eq(variables.releaseExists, false))
